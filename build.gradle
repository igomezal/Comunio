// Top-level build file where you can add configuration options common to all sub-projects/modules.
import org.ajoberstar.grgit.*

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
	classpath 'org.ajoberstar:gradle-git:1.4.2'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task cloneGitRepo{
		Grgit.clone(dir: file('./repo'), uri: 'https://github.com/igomezal/Comunio.git')
		Grgit.init(dir: file('./repo'))	
}

task copiar(dependsOn: cloneGitRepo,type:Copy){
		into './'
		from './repo'
}

task clone(dependsOn: copiar,type:Delete){
	delete './repo'
}

task pull{
	description 'Pull proyecto'
	doLast{
		def repo = Grgit.open(project.file('.'))
		repo.pull()
	}
}
task pushNuevaRama{
	description 'Push proyecto'
	doLast{
		def repo = Grgit.open(project.file('.'))

		def i = 0 
		def existe
		def booleano = false
		def branches = repo.branch.list()
		while(branches.size()>i){
			if(project.hasProperty("rama") && branches.get(i).getName()==rama){
				existe = branches.get(i).getName()
				booleano=true
			}
			if(branches.get(i).getName()=="rama-gradle"){
				existe = branches.get(i).getName()
				booleano=true
			}	
			i++
		}
		if(booleano==true){
			//repo.checkout(branch:'master')
			repo.branch.remove(names:[existe],force:true)
		}


		if(project.hasProperty("rama") && (repo.branch.getCurrent().getName() != rama)){
			repo.checkout(branch: rama,createBranch:true)
			repo.commit(message: 'Cambios Gradle',all:true)
			repo.push()
		}else if(project.hasProperty("rama") && (repo.branch.getCurrent().getName() == rama)){
			repo.commit(message: 'Cambios Gradle',all:true)
			repo.push()
		}else if(repo.branch.getCurrent().getName() == "rama-gradle"){
			repo.commit(message: 'Cambios Gradle',all:true)
			repo.push()
		}else{		
			repo.checkout(branch: 'rama-gradle',createBranch:true)
			repo.commit(message: 'Cambios Gradle',all:true)
			repo.push()
		}

		def ramaObjetivo = repo.branch.getCurrent().getName()
		repo.checkout(branch:'master')

		print "Realizado push a la rama: ${ramaObjetivo} y actualmente se encuentra en la rama master"	
	}	
}

task pushActual{
	doLast{
		def repo = Grgit.open(project.file('.'))
		repo.commit(message: 'Cambios Gradle',all:true)
		repo.push()
	}
}



